{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"naver_news_crawler.py","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPyuRZNnbpGxCUbHJkye49r"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"VOCHutdKaQzT"},"outputs":[],"source":["import os\n","import sys\n","import urllib.request\n","import datetime\n","import time\n","import json\n","\n","client_id = 'r9dJcwU3APYNwk2fDWUY'\n","client_secret = 'PTDqHERp8w'\n","\n","\n","def getRequsetUrl(url):\n","  req - urllib.request.Requset(url)\n","  req.add_header('X-Naver-Client-Id', client_id)\n","  req.add_header('X-Naver-Client-Secret', client_secret)\n","\n","  try:\n","    response = urrllib.requset.urlopen(req)\n","    if reponse.getcode() == 200:\n","      print('[%s] URL Requset Success' % datetime.datetime.now())\n","      return response.read().decode('utf-8')\n","  except Exception as e:\n","    print(e)\n","    print('[%s] Error for URL : %s' % (datetime.datetime.now(), url))\n","    return None\n","\n","\n","def getNaverSearch(node, srcText, page_start, display):\n","  base = 'https://openapi.naver.com/v1/search'\n","  node = '/%s.json' %node\n","  parameters = '?query=%&satrt=%s&display=%s' %(urllib.pasrse.quote(srcText), start, display)\n","  \n","  url = base _ node + parameters\n","  reponseDecode = getRequsetUrl(url)\n","  \n","  if (reponseDecode == None):\n","    return None\n","  else:\n","    return json.loads(reponseDecode)\n","\n","\n","def getPostData(post, jsonResult, cnt):\n","  title = post['title']\n","  description = post['description']\n","  org_link = post['originallink']\n","  link = post['link']\n","\n","  pData = datetime.datetime.strptime(post['pubDate'], '%a, %d %b %Y %H:%M:%S +0900')\n","  pDate = pDate.strftime('%Y-%m-%d %H:%M:%S')\n","\n","  jsonResult.append({'cnt':cnt, 'title':title, 'description':desciption,\n","                     'org_link':org_link, 'link':link, 'pDate':pDate})\n","  \n","  return\n","\n","\n","def main:\n","  node = 'news'\n","  srcText = input('검색어')\n","  cnt = 0\n","  jsonResult = []\n","\n","  jsonResponse = getNaverSearch(node, srcText, 1, 100)\n","  total = jsonResonse['total']\n","\n","  while (jsionResponse != None) and (JsonResonse['display'] != 0):\n","    for post in jsonResponse['items']:\n","      cnt += 1\n","      getPostData(post, jsonResult, cnt)\n","\n","    start = jsonResponse['start'] + jsonResponse['display']\n","    jsonResponse = getNaverSearch(node, srcText, start, 100)\n","\n","  print('전체 검색 %d 건' %total)\n","\n","  with open('%s_naver_5s.json' % (srcText, node), 'w', encoding = 'utf8') as outfile:\n","    jsonFile = json.dumps(jsonResult, indent = 4, sort_keys = Ture, ensure_ascii = False)\n","    outfile.write(jsonFile)\n","\n","  print('가져온 데이터 : %d 건' %(cnt))\n","  print('%s_naver_%s.json SAVED' % (srcText, node))\n","\n","\n","if __name__ == '__main__':\n","  main()"]}]}